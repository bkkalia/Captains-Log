{
  "name": "grunt-markdown-to-json",
  "description": "Extract YAML front-matter from Markdown files to a single JSON file",
  "version": "0.4.2",
  "homepage": "https://github.com/scottstanfield/grunt-markdown-to-json",
  "author": {
    "name": "Scott Stanfield",
    "email": "scott@vertigo.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/scottstanfield/grunt-markdown-to-json.git"
  },
  "bugs": {
    "url": "https://github.com/scottstanfield/grunt-markdown-to-json/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/scottstanfield/grunt-markdown-to-json/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "markdown",
    "yaml",
    "json"
  ],
  "dependencies": {
    "markdown-to-json": "~0.4.2"
  },
  "readme": "# grunt-markdown-to-json\n\n> Extract YAML front-matter from Markdown files to a single JSON file.\n\nThe use case for this markdown-to-yaml-to-json task is somewhat narrow.\nI use it to strip the YAML front-matter off a set of blog posts written\nin Markdown. The metadata for each file is combined into a single\nobject, then emitted as a JSON file. \n\nAlong the way, a few extra fields are created for each article: \n\n- an ISO 8601 formatted date\n- a preview of the actual body content\n- the basename of the file, used as a key to get back to the metadata\n\nIt wraps the\n[markdown-to-json](https://github.com/scottstanfield/markdown-to-json)\nnpm module. \n\nI realize a more descriptive name for this task would be\n`markdown-yaml-frontmatter-to-json` but that's pretty wordy. And you\ncan't have dashes in tasks, so the shortname is `m2j`.\n\nIncidentally, I never had Grunt figured out until I wrote this contrib\nmodule. It finally made sense. Try pulling down the source for this and\nrunning `grunt test` for yourself, and inspect the test input\n(test\\fixtures) and output (test\\expected).\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to\ncheck out the [Getting Started](http://gruntjs.com/getting-started)\nguide, as it explains how to create a\n[Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and\nuse Grunt plugins. Once you're familiar with that process, you may\ninstall this plugin with this command:\n\n\t% npm install grunt-markdown-to-json --save-dev\n\nThe plugin should load automatically, since your Gruntfile.js parses\nyour package.json, which has a reference to the library.\n\n\n## The \"m2j\" task\n\nPretend you have a folder structure like this:\n\n    .\n    ├── Gruntfile.coffee\n    ├── component.json\n    ├── package.json\n    └── source\n        ├── articles\n        │   ├── bellflower.md    <--\n        │   ├── fiddler.md       <--\n        │   └── lottery.md       <--\n        ├── favicon.ico\n        ├── index.jade\n        ├── style.styl\n        ├── styles\n        │   ├── h5bp.css\n        │   ├── main.css\n        │   └── normalize.css\n        └── templates\n            └── h5bp.jade\n\nEach Markdown file in the articles directory has a bit of YAML metadata, like\nthe title of the article, author, and tags. We want just the metadata from all\nthree to be combined into a single JSON stringified file, called articles.json.\n\nNow `grunt release` will build a `release` folder that looks like this:\n\n    .\n    ├── Gruntfile.coffee\n    ├── component.json\n    ├── package.json\n    ├── release\n    │   ├── articles\n    │   │   ├── bellflower.html\n    │   │   ├── fiddle.html\n    │   │   └── lottery.html\n    │   ├── articles.json            <---\n    │   ├── favicon.ico\n    │   ├── index.html\n    │   └── style.css\n    └── source\n\n\n### Configuring your m2j task\n\nIn your project's Gruntfile, add a section named `m2j` to\nthe data object passed into `grunt.initConfig()`.\n\n\tm2j: {\n\t\trelease: {\n\t\t\toptions: {\n\t\t\t\tminify: true,\n\t\t\t\twidth: 60\n\t\t\t},\n\t\t\tfiles: {\n\t\t\t\t'release/articles.json': ['source/articles/*.md']\n\t\t\t},\n\t\t}\n\t}\n\n### Options\n\n#### options.minify\nType: `Boolean`\nDefault value: `false`\n\nIf true, then the JSON.stringify is instructed to strip unnecessary\nlinebreaks, making the resulting .json file smaller.\n\n#### options.width\nType: `Int`\nDefault value: `70`\n\nNo more than `width` charactes from the Markdown file's body is saved in\nthe `preview` element. Trailing ellipses are added.\n\n#### options.files\nThis is the common source / destination pairing you see in all Grunt\ntasks. Note that you have just one destination, one or more sources, per pair. \n\nSee the [docs](http://gruntjs.com/configuring-tasks#compact-format),\nspecifically the Compact Format and Files Object Format for examples.\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing\ncoding style. Add unit tests for any new or changed functionality. Lint\nand test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\nVersion 0.4.0 is the initial version, which matches 0.4.1 of the npm\nmodule `m2j`.\n\n> Scott Stanfield  \n> scott@vertigo.com  \n> April 2014  \n\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-markdown-to-json@0.4.2",
  "dist": {
    "shasum": "de9f08ff1711899a5c36eaf2617e5b93159ce52f"
  },
  "_from": "grunt-markdown-to-json@",
  "_resolved": "https://registry.npmjs.org/grunt-markdown-to-json/-/grunt-markdown-to-json-0.4.2.tgz"
}
